const { mainButtons } = require('../../Components/Buttons');
const {
  saveProduct,
  updateProductTotalAmount,
  updateProductInfo,
} = require('../../Storages/ProductStorage');
const { dateForErrorLog } = require('../../utils/formatDate');

// const info = {
//   yourMsg: '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
//   recipient: '–æ—Ç—Ä–∏–º—É–≤–∞—á',
// };
let states = {};
module.exports = (app, bot, logger) => {
  try {
    bot.on('text', async (msg) => {
      const { chat } = msg;

      const exitButton = '–í–∏–π—Ç–∏ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è';
      console.log(states);
      if (msg.text === exitButton) {
        delete states[msg.from.id];
        delete states[msg.from.id + `id`];
      }
      if (msg.text === '–î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∫—É') {
        bot
          .sendMessage(msg.from.id, '–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–µ–∫ –Ω–∞–º–±–µ—Ä: ', {
            reply_to_message_id: msg.message_id,
            reply_markup: {
              force_reply: true,
              selective: true,
            },
          })
          .then(() => {
            states[msg.from.id] = 1;
          });
      }

      if (states[msg.from.id] == 1) {
        const result = await saveProduct({
          trackNumber: msg.text,
          userTGId: msg.from.id,
          userTGNick: msg.from.username,
        });

        if (result) {
          bot
            .sendMessage(msg.from.id, '–í–≤–µ–¥—ñ—Ç—å –µ–º–∞—É–Ω—Ç: ', {
              reply_to_message_id: msg.message_id,
              reply_markup: {
                force_reply: true,
                selective: true,
              },
            })
            .then(() => {
              states[msg.from.id] = 2;
              states[msg.from.id + `id`] = result._id.toString();
            });
        } else {
          logger.error(
            `${dateForErrorLog()} -- Error save to DB user id: ${msg.from.id} username: ${
              msg.from.username
            }`,
          );
          bot.sendMessage(msg.from.id, '–ü–æ–º–∏–ª–∫–∞ —Å–µ–π–≤—É –¥–æ –î–ë, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ: ');
          delete states[msg.from.id];
          delete states[msg.from.id + `id`];
        }
      }
      if (states[msg.from.id] == 2) {
        const result = await updateProductTotalAmount({
          _id: states[msg.from.id + `id`],
          totalAmount: msg.text,
        });
        if (result) {
          bot
            .sendMessage(msg.from.id, '–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ñ–æ: ', {
              reply_to_message_id: msg.message_id,
              reply_markup: {
                force_reply: true,
                selective: true,
              },
            })
            .then(() => {
              states[msg.from.id] = 3;
            });
        } else {
          logger.error(
            `${dateForErrorLog()} -- Error update amount to DB user id: ${msg.from.id} username: ${
              msg.from.username
            }`,
          );
          bot.sendMessage(msg.from.id, '–ü–æ–º–∏–ª–∫–∞ —Å–µ–π–≤—É –¥–æ –î–ë, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ: ');
          delete states[msg.from.id];
          delete states[msg.from.id + `id`];
        }
      }
      if (states[msg.from.id] == 3) {
        const result = await updateProductInfo({
          _id: states[msg.from.id + `id`],
          info: msg.text,
        });
        if (result) {
          bot
            .sendMessage(msg.from.id, '–ü–æ—Å–∏–ª–∫–∞ –¥–æ–¥–∞–Ω–∞! –ß–µ–∫–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å–∏ ', {
              reply_to_message_id: msg.message_id,
              reply_markup: {
                force_reply: true,
                selective: true,
              },
            })
            .then(() => {
              delete states[msg.from.id];
              delete states[msg.from.id + `id`];
              // states[msg.chat.id] = 0;
            });
        } else {
          logger.error(
            `${dateForErrorLog()} -- Error update info to DB user id: ${msg.from.id} username: ${
              msg.from.username
            }`,
          );
          bot.sendMessage(msg.from.id, '–ü–æ–º–∏–ª–∫–∞ —Å–µ–π–≤—É –¥–æ –î–ë, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ: ');
          delete states[msg.from.id];
          delete states[msg.from.id + `id`];
        }
      }

      if (msg.text === 'ü§ë–¢–∞—Ä–∏—Ñ—ã') {
        await bot.sendMessage(chat.id, `TODO –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º...`, {
          parse_mode: 'HTML',
        });
      }
      if (msg.text === 'üìú–ü—Ä–∞–≤–∏–ª–∞') {
        await bot.sendMessage(chat.id, `TODO –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º...`, {
          parse_mode: 'HTML',
        });
      }
      if (msg.text === '‚úèÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º') {
        await bot.sendMessage(chat.id, `TODO –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º...`, {
          parse_mode: 'HTML',
        });
      }
      if (msg.text === 'üî•–ö–∞–Ω–∞–ª') {
        await bot.sendMessage(chat.id, `TODO –Ω–∞—à –∫–∞–Ω–∞–ª...`, {
          parse_mode: 'HTML',
        });
      }
      if (msg.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é') {
        await bot.sendMessage(chat.id, '–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ', {
          reply_markup: {
            remove_keyboard: true,
          },
        });
      }
      if (msg.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é') {
        await bot.sendMessage(chat.id, '–ù–∞ –≥–ª–∞–≤–Ω—É—é', {
          reply_markup: {
            keyboard: mainButtons,
            resize_keyboard: true,
          },
        });
      }
    });
  } catch (e) {
    logger.error(`${dateForErrorLog()} -- Button controller error`);
    console.log('Button controller error');
  }
};
